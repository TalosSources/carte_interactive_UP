# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/5-Minute-Production-App.gitlab-ci.yml

# This template is on early stage of development.
# Use it with caution. For usage instruction please read
# https://gitlab.com/gitlab-org/5-minute-production-app/deploy-template/-/blob/v3.0.0/README.md

include:
  # workflow rules to prevent duplicate detached pipelines
  #- template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'
  # auto devops build
  #- template: 'Jobs/Build.gitlab-ci.yml'

stages:
  #- build
  - test
  #- provision
  - deploy
  #- destroy

variables:
  #TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_COMMIT_REF_SLUG}
  #TF_VAR_ENVIRONMENT_NAME: ${CI_PROJECT_PATH_SLUG}_${CI_PROJECT_ID}_${CI_COMMIT_REF_SLUG}
  #TF_VAR_SERVICE_DESK_EMAIL: incoming+${CI_PROJECT_PATH_SLUG}-${CI_PROJECT_ID}-issue-@incoming.gitlab.com
  #TF_VAR_SHORT_ENVIRONMENT_NAME: ${CI_PROJECT_ID}-${CI_COMMIT_REF_SLUG}
  #TF_VAR_SMTP_FROM: ${SMTP_FROM}

#cache:
#  paths:
#    - .terraform


dryrun_prepare:
  stage: test
  script:
    - sudo docker-compose -p dryrun down
    - sudo docker-compose -p dryrun rm

dryrun_build:
  stage: test
  script:
    - echo export const version = \'$(git describe --long --all --dirty)\' > react-frontend/src/version.tsx
    - mv docker-compose.override.yml.dryrun docker-compose.override.yml
    - echo REACT_APP_BACKEND_URL=https://smartakartan.entrop.mywire.org/api > react-frontend/.env.development
    - sudo docker-compose -p dryrun build

eslint:
  stage: test
  script:
    - sudo docker-compose -p dryrun run web npx eslint /react-frontend

dryrun_start:
  stage: test
  script:
    - echo export const version = \"$(git describe --long --all --dirty)\" > react-frontend/src/version.tsx
    - mv docker-compose.override.yml.dryrun docker-compose.override.yml
    - echo REACT_APP_BACKEND_URL=https://smartakartan.entrop.mywire.org/api > react-frontend/.env.development
    - sudo docker-compose -p dryrun up -d
    # needs to have some temporal difference to the start, so the db is prepared
    - sleep 40

dryrun_import:
  stage: test
  script:
    - echo export const version = \"$(git describe --long --all --dirty)\" > react-frontend/src/version.tsx
    - mv docker-compose.override.yml.dryrun docker-compose.override.yml
    - echo REACT_APP_BACKEND_URL=https://smartakartan.entrop.mywire.org/api > react-frontend/.env.development
    - sudo docker-compose -p dryrun run api /code/manage.py import_sk3_data

dryrun_users:
  stage: test
  script:
    - echo export const version = \"$(git describe --long --all --dirty)\" > react-frontend/src/version.tsx
    - mv docker-compose.override.yml.dryrun docker-compose.override.yml
    - echo REACT_APP_BACKEND_URL=https://smartakartan.entrop.mywire.org/api > react-frontend/.env.development
    - sudo docker-compose -p dryrun run api /code/manage.py setup_user --su -u admin -p admin_pass
    - sudo docker-compose -p dryrun run api /code/manage.py setup_user --ca -u curator -p curator_pass

dryrun_cleanup:
  stage: test
  script:
    - echo export const version = \"$(git describe --long --all --dirty)\" > react-frontend/src/version.tsx
    - mv docker-compose.override.yml.dryrun docker-compose.override.yml
    - echo REACT_APP_BACKEND_URL=https://smartakartan.entrop.mywire.org/api > react-frontend/.env.development
    - sudo docker-compose -p dryrun down
    - sudo docker-compose -p dryrun rm
    - sudo docker volume prune -f
    - sudo docker image prune -f
    - sudo docker container prune -f

deploy_prepare:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  script:
    - cd /var/lib/smartakartan/smartakartan-cd
    - git reset --hard
    - git pull
    - echo export const version = \'$(git describe --long --all --dirty)\' > react-frontend/src/version.tsx
    - mv docker-compose.override.yml.prod docker-compose.override.yml

deploy_build:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  script:
    - cd /var/lib/smartakartan/smartakartan-cd
    - sudo docker-compose build

deploy_restart:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  script:
    - cd /var/lib/smartakartan/smartakartan-cd
    - sudo docker-compose down
    - sudo docker-compose rm
    - sudo docker-compose up -d
    - sudo rm -rf media/*
    - sleep 30

deploy_cleanup:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  script:
    - sudo docker volume prune -f
    - sudo docker image prune -f
    - sudo docker container prune -f

deploy_users:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  script:
    - cd /var/lib/smartakartan/smartakartan-cd
    # needs to have some temporal difference to the start, so the db is prepared
    - sudo docker-compose run api /code/manage.py setup_user --su -u admin -p "admin"
    - sudo docker-compose run api /code/manage.py setup_user --ca -u curator -p "curator"

deploy_import:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  script:
    - cd /var/lib/smartakartan/smartakartan-cd
    - sudo docker-compose run api /code/manage.py import_sk3_data
  environment:
    name: production
    url: https://beta.smartakartan.se

cleanup_cache:
  stage: deploy
  when: manual
  script:
    - rm -r /var/lib/smartakartan/smartakartan-cd/cache/* 