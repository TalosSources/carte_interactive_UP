# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/5-Minute-Production-App.gitlab-ci.yml

# This template is on early stage of development.
# Use it with caution. For usage instruction please read
# https://gitlab.com/gitlab-org/5-minute-production-app/deploy-template/-/blob/v3.0.0/README.md

include:
  # workflow rules to prevent duplicate detached pipelines
  #- template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'
  # auto devops build
  #- template: 'Jobs/Build.gitlab-ci.yml'

stages:
  #- build
  - test
  #- provision
  - deploy
  #- destroy

variables:
  #TF_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_COMMIT_REF_SLUG}
  #TF_VAR_ENVIRONMENT_NAME: ${CI_PROJECT_PATH_SLUG}_${CI_PROJECT_ID}_${CI_COMMIT_REF_SLUG}
  #TF_VAR_SERVICE_DESK_EMAIL: incoming+${CI_PROJECT_PATH_SLUG}-${CI_PROJECT_ID}-issue-@incoming.gitlab.com
  #TF_VAR_SHORT_ENVIRONMENT_NAME: ${CI_PROJECT_ID}-${CI_COMMIT_REF_SLUG}
  #TF_VAR_SMTP_FROM: ${SMTP_FROM}

#cache:
#  paths:
#    - .terraform

django_test:
  stage: test
  allow_failure: true
  script:
    - patch docker-compose.yml < compose-test.patch
    - sudo docker-compose -p test down
    - sudo docker-compose -p test rm
    - sudo docker-compose -p test up --build -d #initialize db
    - sleep 10
    - sudo docker-compose -p test run api /code/manage.py test
    - sudo docker-compose -p test down
    - sudo docker-compose -p test rm
    - sudo docker volume prune -f
    - sudo docker image prune -f
    - sudo docker container prune -f

dryrun:
  stage: test
  script:
    - git describe --long --all --dirty > gitver
    - patch docker-compose.yml < compose-dryrun.patch
    - echo REACT_APP_BACKEND_URL=https://smartakartan.entrop.mywire.org/api > react-frontend/.env.development
    - sudo docker-compose -p dryrun up --build -d
    # needs to have some temporal difference to the start, so the db is prepared
    - sleep 20
    - sudo docker-compose -p dryrun run api /code/manage.py import_sk3_data
    - sudo docker-compose -p dryrun run api /code/manage.py setup_user --su -u admin -p admin_pass
    - sudo docker-compose -p dryrun run api /code/manage.py setup_user --ca -u curator -p curator_pass
    - sudo docker-compose -p dryrun down
    - sudo docker-compose -p dryrun rm
    - sudo docker volume prune -f
    - sudo docker image prune -f
    - sudo docker container prune -f

deploy:
  stage: deploy
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
  script:
    - cd /var/lib/smartakartan/smartakartan-cd
    - git reset --hard
    - git pull
    - git describe --long --all --dirty > gitver
    - sudo docker-compose -f docker-compose.prod.yml down
    - sudo docker-compose -f docker-compose.prod.yml rm
    - sudo docker-compose -f docker-compose.prod.yml up --build -d
    - sudo docker volume prune -f
    - sudo docker image prune -f
    - sudo docker container prune -f
    # needs to have some temporal difference to the start, so the db is prepared
    - sleep 20
    - sudo docker-compose -f docker-compose.prod.yml run api /code/manage.py setup_user --su -u admin -p "$ADMIN_PASS"
    - sudo docker-compose -f docker-compose.prod.yml run api /code/manage.py setup_user --ca -u curator -p "$CURATOR_PASS"
    - sudo docker-compose -f docker-compose.prod.yml run api /code/manage.py import_sk3_data
  environment:
    name: production
    url: https://smartakartan.entrop.mywire.org
